{"remainingRequest":"/home/clokbani/DevWeb/Iot-Project/Front/iot-platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/clokbani/DevWeb/Iot-Project/Front/iot-platform/src/views/MyTriggers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/clokbani/DevWeb/Iot-Project/Front/iot-platform/src/views/MyTriggers.vue","mtime":1562083626405},{"path":"/home/clokbani/DevWeb/Iot-Project/Front/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/DevWeb/Iot-Project/Front/iot-platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/clokbani/DevWeb/Iot-Project/Front/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/DevWeb/Iot-Project/Front/iot-platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nexport default {\n    name: \"my-triggers\",\n    data(){\n        return{\n            CreatedDate: '',\n            page: 1,\n            perPage: 3,\n            pages: [],\n        }\n    },\n    computed: {\n        ...mapGetters(['getTriggers', 'getUserId']),\n        displayTriggers () {\n            return this.paginate(this.getTriggers);\n        }\n    },\n    methods:{\n        getDateCreated(data){\n            return data.substring(0,10);\n        },\n        setPages () {\n            this.pages = [];\n            let numberOfPages = Math.ceil(this.getTriggers.length / this.perPage);\n            for (let index = 1; index <= numberOfPages; index++) {\n                this.pages.push(index);\n            }\n        },\n        paginate (triggers) {\n            let page = this.page;\n            let perPage = this.perPage;\n            let from = (page * perPage) - perPage;\n            let to = (page * perPage);\n            return  triggers.slice(from, to);\n        },\n    },\n    watch: {\n        getTriggers() {\n            this.setPages();\n        }\n    },\n    created() {\n        let payload = {\n            'link': '/trigger-service/userTriger/' + this.getUserId ,\n            'mutation': 'setTriggers',\n            'all': false\n        };\n        this.$store.dispatch('getRequest', payload);\n    },\n    mounted(){\n        $(\"tr\").find(\"td\").click(function(){\n            if (!($(this).hasClass(\"not-allowed\"))){\n                window.location = $(this).parent(\"tr\").data('url');\n            }\n        });\n        $('.modal').modal();\n    }\n}\n",{"version":3,"sources":["MyTriggers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MyTriggers.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"content\">\n        <div class=\"row page-title-path\">\n            <div class=\"col\">\n                <h2>{{ $t('main-title') }}</h2>\n            </div>\n            <div class=\"col right\">\n                <p>Home > <span></span></p>\n            </div>\n\n        </div>\n        <section class=\"component-section\">\n            <div v-if=\"!(this.getTriggers === null) \" class=\"row\">\n                <div class=\"col s12 l8\">\n                    <table class = \"striped bordered\">\n                        <thead>\n                        <tr>\n                            <th style=\"width: 4%\">{{ $t('table.id') }}</th>\n                            <th>{{ $t('table.name') }}</th>\n                            <th>{{ $t('table.created') }}</th>\n                            <th>{{ $t('table.actions') }}</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr v-for=\"(trigger, index) in displayTriggers\" :key=\"index\" :data-url=\"'/dashboard/triggers/' + trigger.id\">\n                            <td>{{index + 1}}</td>\n                            <td>{{trigger.nom}}</td>\n                            <td>30/04/2019</td>\n                            <td class=\"action not-allowed\" width=\"15%\">\n                                <router-link :to=\"{ name: 'trigger-overview', params: { id: trigger.id}}\">\n                                    <i class=\"fa fa-chart-bar\"></i>\n                                </router-link>\n                                <a  class=\"waves-effect waves-light modal-trigger\" href=\"#modal1\">\n                                    <i class=\"material-icons prefix\">settings</i>\n                                </a>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <div class=\"right\">\n                        <ul v-if=\"pages.length > 1\" class=\"pagination\">\n                            <li v-if=\"page != 1\" @click=\"page--\"><a href=\"#!\"><i class=\"material-icons\">chevron_left</i></a></li>\n                            <li v-for=\"pageNumber in pages.slice(page-1, page+5)\" @click=\"page = pageNumber\" :class=\"{active: page == pageNumber }\"><a href=\"#!\">{{pageNumber}}</a></li>\n                            <li class=\"waves-effect\"  @click=\"page++\" v-if=\"page < pages.length\"><a href=\"#!\"><i class=\"material-icons\">chevron_right</i></a></li>\n                        </ul>\n                    </div>\n                </div>\n                <div class=\"col l4 s12\">\n                    <div class=\"help\">\n                        <h4>{{ $t('help') }}</h4>\n                        <p v-html=\"this.$t('text')\"></p>\n                    </div>\n                </div>\n            </div>\n            <div v-else class=\"row\">\n                <div  class=\"col s12\">\n                    <div class=\"alert alert-info\" role=\"alert\">\n                        {{ $t('no-trigger') }}\n                    </div>\n                    <router-link :to=\"{ name: 'new-trigger'}\" class=\"waves-effect waves-light btn\">\n                        {{ $t('add-trigger') }}\n                    </router-link>\n                </div>\n            </div>\n        </section>\n        <!-- Modal Structure -->\n        <div id=\"modal1\" class=\"modal modal-fixed-footer\">\n            <div class=\"modal-content\">\n                <h4>Modal Header</h4>\n                <p>A bunch of text</p>\n            </div>\n            <div class=\"modal-footer\">\n                <a href=\"#!\" class=\"modal-close waves-effect waves-green btn-flat\">Agree</a>\n            </div>\n        </div>\n\n    </div>\n</template>\n\n<script>\n    import { mapGetters } from 'vuex'\n    export default {\n        name: \"my-triggers\",\n        data(){\n            return{\n                CreatedDate: '',\n                page: 1,\n                perPage: 3,\n                pages: [],\n            }\n        },\n        computed: {\n            ...mapGetters(['getTriggers', 'getUserId']),\n            displayTriggers () {\n                return this.paginate(this.getTriggers);\n            }\n        },\n        methods:{\n            getDateCreated(data){\n                return data.substring(0,10);\n            },\n            setPages () {\n                this.pages = [];\n                let numberOfPages = Math.ceil(this.getTriggers.length / this.perPage);\n                for (let index = 1; index <= numberOfPages; index++) {\n                    this.pages.push(index);\n                }\n            },\n            paginate (triggers) {\n                let page = this.page;\n                let perPage = this.perPage;\n                let from = (page * perPage) - perPage;\n                let to = (page * perPage);\n                return  triggers.slice(from, to);\n            },\n        },\n        watch: {\n            getTriggers() {\n                this.setPages();\n            }\n        },\n        created() {\n            let payload = {\n                'link': '/trigger-service/userTriger/' + this.getUserId ,\n                'mutation': 'setTriggers',\n                'all': false\n            };\n            this.$store.dispatch('getRequest', payload);\n        },\n        mounted(){\n            $(\"tr\").find(\"td\").click(function(){\n                if (!($(this).hasClass(\"not-allowed\"))){\n                    window.location = $(this).parent(\"tr\").data('url');\n                }\n            });\n            $('.modal').modal();\n        }\n    }\n</script>\n<i18n>\n    {\n    \"en\": {\n    \"main-title\": \"My Triggers\",\n    \"no-trigger\": \"No Trigger to display\",\n    \"add-trigger\": \"New Trigger\",\n    \"help\": \"Help\",\n    \"text\": \"TalkBack enables any device to act on queued commands. For example, if you have a door that is outfitted with Wi-Fi and a motion sensor, you can queue up commands to open and close the door. When the door senses someone nearby, open the door. After a specified time, close the door. If there are no more commands in the queue, the door does not open when the next person approaches.\",\n    \"table\": {\n    \"id\": \"#\",\n    \"name\": \"Name\",\n    \"created\": \"Created\",\n    \"actions\": \"Actions\"\n    }\n    },\n    \"fr\": {\n    \"main-title\": \"Mes Triggers\",\n    \"no-trigger\": \"Aucun Trigger Ã  Afficher\",\n    \"add-trigger\": \"Nouveau Trigger\",\n    \"help\": \"Aide\",\n    \"text\": \"TalkBack permet Ã  tout appareil d'agir sur les commandes en file d'attente. Par exemple, si une porte est Ã©quipÃ©e du Wi-Fi et d'un dÃ©tecteur de mouvement, vous pouvez mettre en file d'attente les commandes permettant d'ouvrir et de fermer la porte. Lorsque la porte dÃ©tecte quelqu'un Ã  proximitÃ©, ouvrez-la. AprÃ¨s un temps spÃ©cifiÃ©, fermez la porte. S'il n'y a plus de commandes dans la file d'attente, la porte ne s'ouvre pas Ã  l'approche de la personne suivante. \",\n    \"table\": {\n    \"id\": \"#\",\n    \"name\": \"Nom\",\n    \"created\": \"CrÃ©Ã©\",\n    \"actions\": \"Actions\"\n    }\n    }\n    }\n</i18n>\n"]}]}