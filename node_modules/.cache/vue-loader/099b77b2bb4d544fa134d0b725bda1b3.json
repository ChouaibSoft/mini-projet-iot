{"remainingRequest":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/src/components/FieldChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/src/components/FieldChart.vue","mtime":1562083328000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport axios from 'axios';\nimport Pusher from 'pusher-js'\nimport Plotly from 'plotly.js'\nimport {  mapGetters } from 'vuex';\n\nexport default {\n    name: \"FieldChart\",\n    data() {\n        return {\n            valeur: null,\n            date: null,\n            chart: null,\n            id: '',\n            file: null,\n            idfield: null,\n\n        }\n    },\n    computed: {\n        ...mapGetters(['getApiUrl'])\n    },\n    props: ['nameField', 'idField'],\n    created() {\n        this.id = this.nameField + '-' + this.idField;\n        //   Pusher.logToConsole = true;\n\n        var key = this.$store.state.canal.cleLecture,\n            keyWrite = this.$store.state.canal.cleEcriture,\n            token = this.$store.state.token,\n            nameF = this.nameField,\n            idChart = this.id;\n\n        var pusher = new Pusher('84bee67aad46ed497369', {\n            cluster: 'eu',\n            forceTLS: true\n        });\n\n        var channel = pusher.subscribe('my-channel'),\n            apiUrl  =  this.getApiUrl;\n        channel.bind('my-event', function (data) {\n            if (data['data'] === keyWrite) {\n                axios.get( apiUrl +  '/canal-service/read?key=' + key + '&field=' + nameF, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + token\n                    }\n                })\n                    .then(response => {\n                        let results = response.data;\n                        let dateresult = results.map(a => a.date);\n                        let valueresult = results.map(a => a.valeur);\n                        this.valeur = valueresult;\n                        this.date = dateresult;\n\n                        let x = [];\n\n                        for (let i = 0; i < dateresult.length; i++) {\n                            x.push(i);\n                        }\n\n                        var layout = {\n                            title: nameF,\n                            xaxis: {\n                                title: 'Date',\n                                showticklabels: false,\n                                tickangle: 'auto',\n                                tickvals: x,\n                                ticktext: dateresult\n\n                            },\n                            yaxis: {\n                                title: 'Values',\n                                showticklabels: true,\n                            }\n                        };\n                        Plotly.newPlot(idChart, [{y: valueresult}], layout);\n\n                    })\n                    .catch(error => {\n                    })\n            }\n        });\n\n    },\n    mounted() {\n        $('.tooltipped').tooltip();\n        this.getData();\n        $('.fixed-action-btn').floatingActionButton({\n            hoverEnabled: false,\n            direction: 'left',\n        });\n    },\n    methods: {\n        getData() {\n            var key = this.$store.state.canal.cleLecture,\n                token = this.$store.state.token,\n                nameF = this.nameField,\n                apiUrl  =  this.getApiUrl,\n                idChart = this.id;\n            axios.get( apiUrl +  '/canal-service/read?key=' + key + '&field=' + nameF, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                }\n            })\n                .then(response => {\n                    let results = response.data;\n                    let dateresult = results.map(a => a.date);\n                    let valueresult = results.map(a => a.valeur);\n                    this.valeur = valueresult;\n                    this.date = dateresult;\n\n                    let x = [];\n\n                    for (let i = 0; i < dateresult.length; i++) {\n                        x.push(i);\n                    }\n\n                    var layout = {\n                        //title: nameF,\n                        xaxis: {\n                            title: 'Date',\n                            showticklabels: false,\n                            tickangle: 'auto',\n                            tickvals: x,\n                            ticktext: dateresult\n\n                        },\n                        yaxis: {\n                            title: 'Values',\n                            showticklabels: true,\n                        }\n                    };\n                    Plotly.newPlot(idChart, [{y: valueresult}], layout);\n                })\n                .catch(error => {\n                    console.log(error);\n                })\n        },\n\n\n        // import\n\n        processFile(event) {\n            this.file = event.target.files[0];\n            this.importCSV();\n        },\n        importCSV: function () {\n\n            if (this.file.type == \"application/vnd.ms-excel\") {\n\n                let formData = new FormData();\n                let apiUrl  =  this.getApiUrl;\n\n                formData.append('file', this.file);\n\n                axios.post( apiUrl +  '/canal-service/import-data/' + this.idField, formData, {\n                    headers: {\n                        'Content-Type': 'multipart/form-data',\n                        'Authorization': 'Bearer ' + this.$store.state.token,\n                    }\n\n                }).then(function () {\n                    //console.log('SUCCESS!!');\n                }).catch(function () {\n                    //console.log('FAILURE!!');\n                });\n            }\n\n        },\n    }\n}\n",{"version":3,"sources":["FieldChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"FieldChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"field-chart\" class=\"field-chart\">\n        <ul class=\"collapsible\">\n            <li>\n                <div class=\"collapsible-header chart\" style=\"opacity: 1\">\n                    <i class=\"material-icons\">filter_drama</i>{{ $t('canal.fieldX', {num: ''}) }} : <span class=\"teal-text lighten-1\">{{ this.nameField }}</span>\n                    <ul class=\"right\">\n                        <li>\n                            <label for=\"import-file\">\n                                <a class=\"btn-floating  grey darken-1 tooltipped\"\n                                   data-position=\"bottm\" :data-tooltip=\"this.$t('tooltips.import')\">\n                                    <i  class=\"material-icons\">attach_file</i></a>\n                            </label>\n                            <input id=\"import-file\" type=\"file\" accept=\".csv\" @change=\"processFile($event)\">\n                        </li>\n                        <li><a class=\"btn-floating publish tooltipped\"\n                               data-position=\"bottom\" :data-tooltip=\"this.$t('tooltips.export')\"\n                               :href=\" this.getApiUrl +  '/canal-service/export-data/' + this.idField\">\n                            <i class=\"material-icons\">publish</i></a>\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"collapsible-body\"\n                     style=\"display: block; position:relative; height: 290px !important; overflow: hidden\">\n                    <div :id=\"this.id\" width=\"100%\" height=\"100%\"\n                         style=\"display: block; position: absolute; width: 100%; height: 300px !important; top:0; left:0;\"></div>\n                </div>\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\n\n    import axios from 'axios';\n    import Pusher from 'pusher-js'\n    import Plotly from 'plotly.js'\n    import {  mapGetters } from 'vuex';\n\n    export default {\n        name: \"FieldChart\",\n        data() {\n            return {\n                valeur: null,\n                date: null,\n                chart: null,\n                id: '',\n                file: null,\n                idfield: null,\n\n            }\n        },\n        computed: {\n            ...mapGetters(['getApiUrl'])\n        },\n        props: ['nameField', 'idField'],\n        created() {\n            this.id = this.nameField + '-' + this.idField;\n            //   Pusher.logToConsole = true;\n\n            var key = this.$store.state.canal.cleLecture,\n                keyWrite = this.$store.state.canal.cleEcriture,\n                token = this.$store.state.token,\n                nameF = this.nameField,\n                idChart = this.id;\n\n            var pusher = new Pusher('84bee67aad46ed497369', {\n                cluster: 'eu',\n                forceTLS: true\n            });\n\n            var channel = pusher.subscribe('my-channel'),\n                apiUrl  =  this.getApiUrl;\n            channel.bind('my-event', function (data) {\n                if (data['data'] === keyWrite) {\n                    axios.get( apiUrl +  '/canal-service/read?key=' + key + '&field=' + nameF, {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': 'Bearer ' + token\n                        }\n                    })\n                        .then(response => {\n                            let results = response.data;\n                            let dateresult = results.map(a => a.date);\n                            let valueresult = results.map(a => a.valeur);\n                            this.valeur = valueresult;\n                            this.date = dateresult;\n\n                            let x = [];\n\n                            for (let i = 0; i < dateresult.length; i++) {\n                                x.push(i);\n                            }\n\n                            var layout = {\n                                title: nameF,\n                                xaxis: {\n                                    title: 'Date',\n                                    showticklabels: false,\n                                    tickangle: 'auto',\n                                    tickvals: x,\n                                    ticktext: dateresult\n\n                                },\n                                yaxis: {\n                                    title: 'Values',\n                                    showticklabels: true,\n                                }\n                            };\n                            Plotly.newPlot(idChart, [{y: valueresult}], layout);\n\n                        })\n                        .catch(error => {\n                        })\n                }\n            });\n\n        },\n        mounted() {\n            $('.tooltipped').tooltip();\n            this.getData();\n            $('.fixed-action-btn').floatingActionButton({\n                hoverEnabled: false,\n                direction: 'left',\n            });\n        },\n        methods: {\n            getData() {\n                var key = this.$store.state.canal.cleLecture,\n                    token = this.$store.state.token,\n                    nameF = this.nameField,\n                    apiUrl  =  this.getApiUrl,\n                    idChart = this.id;\n                axios.get( apiUrl +  '/canal-service/read?key=' + key + '&field=' + nameF, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + token\n                    }\n                })\n                    .then(response => {\n                        let results = response.data;\n                        let dateresult = results.map(a => a.date);\n                        let valueresult = results.map(a => a.valeur);\n                        this.valeur = valueresult;\n                        this.date = dateresult;\n\n                        let x = [];\n\n                        for (let i = 0; i < dateresult.length; i++) {\n                            x.push(i);\n                        }\n\n                        var layout = {\n                            //title: nameF,\n                            xaxis: {\n                                title: 'Date',\n                                showticklabels: false,\n                                tickangle: 'auto',\n                                tickvals: x,\n                                ticktext: dateresult\n\n                            },\n                            yaxis: {\n                                title: 'Values',\n                                showticklabels: true,\n                            }\n                        };\n                        Plotly.newPlot(idChart, [{y: valueresult}], layout);\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    })\n            },\n\n\n            // import\n\n            processFile(event) {\n                this.file = event.target.files[0];\n                this.importCSV();\n            },\n            importCSV: function () {\n\n                if (this.file.type == \"application/vnd.ms-excel\") {\n\n                    let formData = new FormData();\n                    let apiUrl  =  this.getApiUrl;\n\n                    formData.append('file', this.file);\n\n                    axios.post( apiUrl +  '/canal-service/import-data/' + this.idField, formData, {\n                        headers: {\n                            'Content-Type': 'multipart/form-data',\n                            'Authorization': 'Bearer ' + this.$store.state.token,\n                        }\n\n                    }).then(function () {\n                        //console.log('SUCCESS!!');\n                    }).catch(function () {\n                        //console.log('FAILURE!!');\n                    });\n                }\n\n            },\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n"]}]}