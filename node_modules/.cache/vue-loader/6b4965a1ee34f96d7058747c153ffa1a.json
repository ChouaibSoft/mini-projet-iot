{"remainingRequest":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/src/views/AddTrigger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/src/views/AddTrigger.vue","mtime":1578948499539},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions, mapGetters } from 'vuex';\nimport { required, minLength } from 'vuelidate/lib/validators'\nimport Form from \"@/components/Form\";\nexport default {\n    name: \"new-trigger\",\n    components: {\n        'generic-form': Form\n    },\n    data (){\n        return{\n            name: '',\n            id: '',\n            iduser:'',\n            lock: false\n        }\n    },\n    computed:{\n        ...mapGetters(['getUserId'])\n    },\n    methods: {\n        ...mapActions(['postRequest']),\n        addTrigger: function () {\n            this.lock = true;\n            var postData = {\n                value: this.name\n                \n            };\n            var payload = {\n                'data': postData,\n                'link': '/aquisition-service/commands/' + this.getUserId\n            };\n            this.postRequest(payload).then(() => {\n                this.flash(this.$t('trigger.add-success'), 'success');\n                this.name = \"\";\n                this.lock = false;\n            }).catch(() => {\n                this.flash(this.$t('trigger.add-error'), 'error');\n            })\n        },\n        addCommande: function () {\n            var commande = \"Commande\" + (this.commandes.length + 1);\n            this.commandes.push({\n                name: commande,\n                value: ''\n            });\n        },\n        deleteCommande: function (index) {\n            this.commandes.splice(index, 1);\n        }\n    },\n    mounted(){\n        $('textarea#description').characterCounter();\n\n    },\n    validations: {\n        name: {\n            required,\n            minLength: minLength(3)\n        },\n        commandes: {\n            minLength: minLength(3)\n        }\n    },\n}\n",{"version":3,"sources":["AddTrigger.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AddTrigger.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"content\">\n        <div class=\"row page-title-path\">\n            <div class=\"col\">\n                <h2>{{ $t('main-title') }}</h2>\n            </div>\n            <div class=\"col right\">\n                <p>Home > <span> {{ $t('main-title') }}</span></p>\n            </div>\n        </div>\n        <section class=\"component-section\">\n            <div class=\"row\">\n                <div class=\"col s12 l5\">\n                    <form class=\"form\" id=\"add-canal\" @submit.prevent=\"addTrigger\">\n                        <generic-form>\n                            <div slot=\"form-fields\">\n                                <div class=\"row\">\n                                    <div class=\"input-field col s12\">\n                                        <input\n                                                id=\"name\"\n                                                type=\"text\"\n                                                required\n                                                minlength=\"3\"\n                                                class=\"validate\"\n                                                v-model=\"name\"\n                                                @input=\"$v.name.$touch()\">\n                                        <label for=\"name\">{{ $t('trigger.commandX') }}</label>\n                                        <div v-if=\"$v.name.$dirty\">\n                                            <p class=\"error-message red-text \" v-if=\"!$v.name.required\">\n                                                {{ $t('errors.required') }}\n                                            </p>\n                                            <p class=\"error-message red-text \" v-if=\"!$v.name.minLength\">\n                                                {{ $t('errors.min-length', {minLength: 3}) }}\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div slot=\"form-controls\">\n                                <div>\n                                    <div class=\"row\">\n                                        <div class=\"col right\">\n                                            <button type=\"submit\" :disabled=\"lock === true\" class=\"button waves-effect waves-light btn\">\n                                                {{ $t('trigger.add') }}\n                                                <i class=\"material-icons right\">send</i>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </generic-form>\n                    </form>\n                </div>\n                <div class=\"col l7 s12\">\n                    <h4>{{ $t('help') }}</h4>\n                    <p>{{ $t('trigger-des') }}</p>\n                    <h5>{{ $t('trigger-settings') }}</h5>\n                    <ul class=\"help-list\">\n                        <li>\n                            <p><strong>{{ $t('settings.name') }}</strong>{{ $t('settings.name-det') }}</p>\n                        </li>\n                        <li>\n                            <p v-html=\"this.$t('settings.command-det')\"></p>\n                        </li>\n                    </ul>\n\n                </div>\n            </div>\n        </section>\n    </div>\n</template>\n\n<script>\n    import { mapState, mapActions, mapGetters } from 'vuex';\n    import { required, minLength } from 'vuelidate/lib/validators'\n    import Form from \"@/components/Form\";\n    export default {\n        name: \"new-trigger\",\n        components: {\n            'generic-form': Form\n        },\n        data (){\n            return{\n                name: '',\n                id: '',\n                iduser:'',\n                lock: false\n            }\n        },\n        computed:{\n            ...mapGetters(['getUserId'])\n        },\n        methods: {\n            ...mapActions(['postRequest']),\n            addTrigger: function () {\n                this.lock = true;\n                var postData = {\n                    value: this.name\n                    \n                };\n                var payload = {\n                    'data': postData,\n                    'link': '/aquisition-service/commands/' + this.getUserId\n                };\n                this.postRequest(payload).then(() => {\n                    this.flash(this.$t('trigger.add-success'), 'success');\n                    this.name = \"\";\n                    this.lock = false;\n                }).catch(() => {\n                    this.flash(this.$t('trigger.add-error'), 'error');\n                })\n            },\n            addCommande: function () {\n                var commande = \"Commande\" + (this.commandes.length + 1);\n                this.commandes.push({\n                    name: commande,\n                    value: ''\n                });\n            },\n            deleteCommande: function (index) {\n                this.commandes.splice(index, 1);\n            }\n        },\n        mounted(){\n            $('textarea#description').characterCounter();\n\n        },\n        validations: {\n            name: {\n                required,\n                minLength: minLength(3)\n            },\n            commandes: {\n                minLength: minLength(3)\n            }\n        },\n    }\n</script>\n\n<style scoped lang=\"scss\">\n</style>\n<i18n>\n    {\n    \"en\": {\n    \"main-title\": \"New Action\",\n    \"trigger-des\": \"Use the TalkBack app to send new commands to any device.\",\n    \"trigger-settings\": \"Action Settings\",\n    \"settings\": {\n    \"name\": \"Action Name : \",\n    \"name-det\": \"Enter a unique name for your Action.\",\n    \"command\": \"Commands\",\n    \"command-det\": \"<strong>Commands : </strong> Click  <strong>+ command </strong> to queue new commands to your TalkBack. You can also queue up commands using the Action API.\"\n    }\n\n    },\n    \"fr\": {\n    \"main-title\": \"Nouveau Action\",\n    \"trigger-settings\": \"Param√®tres de Action\",\n    \"settings\": {\n    \"name\": \"Nom du Action : \",\n    \"name-det\": \"Entrez un nom unique pour votre Actions.\",\n    \"command\": \"Commandes\",\n    \"command-det\": \"<strong>Commandes : </strong> Cliquez sur  <strong>+ commande </strong> pour ajouter une nouvelle commande pour votre Action\"\n    }\n    }\n    }\n</i18n>\n"]}]}