{"remainingRequest":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/src/views/DetailTrigger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/src/views/DetailTrigger.vue","mtime":1562083570000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mapActions, mapGetters} from 'vuex'\nimport Form from \"@/components/Form\";\n\nexport default {\n    name: \"detail-trigger\",\n    data() {\n        return {\n            commands: [],\n            IdTriger: '',\n            page: 1,\n            perPage: 4,\n            pages: [],\n        }\n    },\n    components: {\n        'generic-form': Form,\n    },\n    computed: {\n        ...mapGetters(['getTrigger', 'getCommands', 'getUserId']),\n        displayCommands() {\n            return this.paginate(this.getCommands);\n        }\n    },\n    methods: {\n        ...mapActions(['postRequest']),\n        pushCommand: function () {\n            var postData = {};\n            for (var i = 1; i <= this.commands.length; i++) {\n                var key = 'commande' + i,\n                    value = this.commands[i - 1].value;\n                if (value === '') {\n                    break;\n                }\n                postData[key] = value;\n            }\n            var payload = {\n                'data': postData,\n                'link': '/trigger-service/trigger/' + this.IdTriger\n            };\n            this.postRequest(payload).then(() => {\n                this.flash(this.$t('commande.add-success'), 'success');\n                var payloadB = {\n                    'link': '/trigger-service/trigers/' + this.IdTriger + '/commandes',\n                    'mutation': 'setCommands',\n                    'all': true\n                };\n                this.$store.dispatch('getRequest', payloadB);\n                this.commands = [];\n            }).catch(() => {\n                this.flash(this.$t('commande.add-error'), 'error');\n            })\n        },\n        addCommand: function () {\n            var commande = \"Commande\" + (this.commands.length + 1);\n            this.commands.push({\n                name: commande,\n                value: ''\n            });\n        },\n        deleteCommand: function (index) {\n            this.commands.splice(index, 1);\n        },\n        setPages() {\n            this.pages = [];\n            let numberOfPages = Math.ceil(this.getCommands.length / this.perPage);\n            for (let index = 1; index <= numberOfPages; index++) {\n                this.pages.push(index);\n            }\n        },\n        paginate(commands) {\n            let page = this.page;\n            let perPage = this.perPage;\n            let from = (page * perPage) - perPage;\n            let to = (page * perPage);\n            return commands.slice(from, to);\n        }\n    },\n    watch: {\n        getCommands() {\n            this.setPages();\n        }\n    },\n    created() {\n        var triggerId = this.$route.params.id;\n        this.IdTriger = triggerId\n        var payloadA = {\n            'link': '/trigger-service/userTriger/' + this.getUserId ,\n            'mutation': 'setTriggers',\n            'all': false\n        };\n        this.$store.dispatch('getRequest', payloadA);\n        var payloadB = {\n            'link': '/trigger-service/trigers/' + triggerId + '/commandes',\n            'mutation': 'setCommands',\n            'all': true\n        };\n        this.$store.dispatch('getRequest', payloadB);\n    },\n}\n",{"version":3,"sources":["DetailTrigger.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DetailTrigger.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"content\">\n        <div class=\"row page-title-path\">\n            <div class=\"col\">\n                <h2>{{ $t('main-title') }}</h2>\n            </div>\n            <div class=\"col right\">\n                <p>Home > <span> My Triggers</span></p>\n            </div>\n\n        </div>\n        <section class=\"component-section\">\n            <div class=\"row\">\n                <div class=\"col s12 l5\">\n                    <div class=\"Trigger-head\">\n                        <p><strong>{{ $t('trigger-name') }}</strong>{{ getTrigger.nom }}</p>\n                        <p><strong>{{ $t('trigger-id') }}</strong>#{{ getTrigger.id }}</p>\n                        <p><strong>{{ $t('trigger-owner')}}</strong>@chouaib</p>\n                    </div>\n                </div>\n                <div class=\"col s12 l7\">\n                    <div class=\"Trigger-head ch-head-2\"\n                         style=\"border-left: 1px solid #9e9e9e; padding: 0 20px 5px 30px\">\n                        <p><strong class=\"transparent\">{{ $t('trigger-key')}}</strong><span\n                                class=\"red  lighten-4 red-text\">{{ getTrigger.apikey }}</span></p>\n                        <div>\n                            <router-link to=\"/dashboard/Triggers/new\"\n                                         class=\"waves-effect waves-light btn delete-Trigger\">\n                                <i class=\"fa fa-trash fa-small\"></i>\n                                {{ $t('delete-trigger') }}\n                            </router-link>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col s12\">\n                    <div class=\"trigger-detail\">\n                        <div class=\"row\">\n                            <div class=\"col s12 l6\">\n                                <h5>{{$t('commands')}}</h5>\n                                <table class=\"striped bordered\">\n                                    <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>{{ $t('table.command-id') }}</th>\n                                        <th>{{ $t('table.command-name') }}</th>\n                                        <th>{{ $t('table.command-created') }}</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    <tr v-for=\"(command, index) in displayCommands\" v-bind:key=\"command\"\n                                        v-bind:class=\"{ 'hide': command.executed\t }\">\n                                        <td>{{ index + 1 }}</td>\n                                        <td>{{command.id}}</td>\n                                        <td>{{command.valeur}}</td>\n                                        <td>30/04/2019</td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                                <div class=\"right\">\n                                    <ul v-if=\"pages.length > 1\" class=\"pagination\">\n                                        <li v-if=\"page != 1\" @click=\"page--\"><a href=\"#!\"><i class=\"material-icons\">chevron_left</i></a>\n                                        </li>\n                                        <li v-for=\"pageNumber in pages.slice(page-1, page+5)\" :key=\"pageNumber\" @click=\"page = pageNumber\"\n                                            :class=\"{active: page == pageNumber }\"><a href=\"#!\">{{pageNumber}}</a></li>\n                                        <li class=\"waves-effect\" @click=\"page++\" v-if=\"page < pages.length\"><a\n                                                href=\"#!\"><i class=\"material-icons\">chevron_right</i></a></li>\n                                    </ul>\n                                </div>\n                                <form class=\"form add-command\" id=\"add-command\" @submit.prevent=\"pushCommand\">\n                                    <generic-form>\n                                        <div slot=\"form-fields\">\n                                            <div class=\"row\" v-for=\"(cmd, index) in this.commands\" :key=\"cmd\">\n                                                <div class=\"input-field col s12\">\n                                                    <input\n                                                            v-bind:id=\"cmd.name\"\n                                                            type=\"text\"\n                                                            class=\"validate\"\n                                                            minlength=\"3\"\n                                                            v-model=\"commands[index].value\">\n                                                    <label v-bind:for=\"cmd.name\">\n                                                        {{ $t('trigger.commandX', {num: index + 1}) }}\n                                                    </label>\n                                                    <i @click=\"deleteCommand(index)\"\n                                                       class=\"fa fa-times delete-field red-text text-darken-5\"></i>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div slot=\"form-controls\">\n                                            <div class=\"row\">\n                                                <div class=\"col\">\n                                                    <div class=\"btn waves-effect waves-light submit\"\n                                                         @click=\"addCommand\">\n                                                        <i style=\"font-size: .9rem\" class=\"fa fa-plus\"></i> {{\n                                                        $t('trigger.commandX', {num: ''}) }}\n                                                    </div>\n                                                </div>\n                                                <div class=\"col right\">\n                                                    <button v-if=\"this.commands.length > 0\" type=\"submit\"\n                                                            class=\"button waves-effect waves-light btn\">\n                                                        {{ $t('trigger.add') }}\n                                                        <i class=\"material-icons right\">send</i>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </generic-form>\n                                </form>\n                            </div>\n                            <div class=\"col s12 l6\">\n                                <h5>{{$t('api-requests')}}</h5>\n                                <div class=\"urls\">\n                                    <div>\n                                        <h6>{{$t('update-url')}}</h6>\n                                        <pre>  POST : http://localhost:8091/ExecuteCommands/<span class=\"key\">{{IdTriger}}</span></pre>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n</template>\n\n<script>\n    import {mapActions, mapGetters} from 'vuex'\n    import Form from \"@/components/Form\";\n\n    export default {\n        name: \"detail-trigger\",\n        data() {\n            return {\n                commands: [],\n                IdTriger: '',\n                page: 1,\n                perPage: 4,\n                pages: [],\n            }\n        },\n        components: {\n            'generic-form': Form,\n        },\n        computed: {\n            ...mapGetters(['getTrigger', 'getCommands', 'getUserId']),\n            displayCommands() {\n                return this.paginate(this.getCommands);\n            }\n        },\n        methods: {\n            ...mapActions(['postRequest']),\n            pushCommand: function () {\n                var postData = {};\n                for (var i = 1; i <= this.commands.length; i++) {\n                    var key = 'commande' + i,\n                        value = this.commands[i - 1].value;\n                    if (value === '') {\n                        break;\n                    }\n                    postData[key] = value;\n                }\n                var payload = {\n                    'data': postData,\n                    'link': '/trigger-service/trigger/' + this.IdTriger\n                };\n                this.postRequest(payload).then(() => {\n                    this.flash(this.$t('commande.add-success'), 'success');\n                    var payloadB = {\n                        'link': '/trigger-service/trigers/' + this.IdTriger + '/commandes',\n                        'mutation': 'setCommands',\n                        'all': true\n                    };\n                    this.$store.dispatch('getRequest', payloadB);\n                    this.commands = [];\n                }).catch(() => {\n                    this.flash(this.$t('commande.add-error'), 'error');\n                })\n            },\n            addCommand: function () {\n                var commande = \"Commande\" + (this.commands.length + 1);\n                this.commands.push({\n                    name: commande,\n                    value: ''\n                });\n            },\n            deleteCommand: function (index) {\n                this.commands.splice(index, 1);\n            },\n            setPages() {\n                this.pages = [];\n                let numberOfPages = Math.ceil(this.getCommands.length / this.perPage);\n                for (let index = 1; index <= numberOfPages; index++) {\n                    this.pages.push(index);\n                }\n            },\n            paginate(commands) {\n                let page = this.page;\n                let perPage = this.perPage;\n                let from = (page * perPage) - perPage;\n                let to = (page * perPage);\n                return commands.slice(from, to);\n            }\n        },\n        watch: {\n            getCommands() {\n                this.setPages();\n            }\n        },\n        created() {\n            var triggerId = this.$route.params.id;\n            this.IdTriger = triggerId\n            var payloadA = {\n                'link': '/trigger-service/userTriger/' + this.getUserId ,\n                'mutation': 'setTriggers',\n                'all': false\n            };\n            this.$store.dispatch('getRequest', payloadA);\n            var payloadB = {\n                'link': '/trigger-service/trigers/' + triggerId + '/commandes',\n                'mutation': 'setCommands',\n                'all': true\n            };\n            this.$store.dispatch('getRequest', payloadB);\n        },\n    }\n</script>\n\n<style scoped>\n</style>\n<i18n>\n    {\n    \"en\": {\n    \"main-title\": \"Trigger Detail :\",\n    \"trigger-name\": \"Trigger Name :\",\n    \"trigger-id\": \"Trigger ID :\",\n    \"trigger-owner\": \"Owner :\",\n    \"trigger-key\": \"API Key : \",\n    \"description\": \"Description :\",\n    \"delete-trigger\": \"Trigger\",\n    \"commands\": \"Commands\",\n    \"api-requests\": \"Requêtes API\",\n    \"update-url\": \"Update URL\",\n    \"table\": {\n    \"command-id\": \"Command ID\",\n    \"command-name\": \"Command Name\",\n    \"command-created\": \"Created\"\n    }\n    },\n    \"fr\": {\n    \"main-title\": \"Detail de Trigger\",\n    \"trigger-name\": \"Nom de Trigger :\",\n    \"trigger-id\": \"ID de Trigger :\",\n    \"trigger-owner\": \"Propriétaire :\",\n    \"trigger-key\": \"API Key : \",\n    \"description\": \"Description :\",\n    \"delete-trigger\": \"Trigger\",\n    \"commands\": \"Commandes\",\n    \"api-requests\": \"API Requests\",\n    \"update-url\": \"Update URL\",\n    \"table\": {\n    \"command-id\": \"ID Commande\",\n    \"command-name\": \"Nom Commande\",\n    \"command-created\": \"Crée\"\n    }\n    }\n    }\n</i18n>\n"]}]}