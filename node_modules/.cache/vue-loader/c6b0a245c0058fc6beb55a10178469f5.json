{"remainingRequest":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/src/views/DetailTrigger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/src/views/DetailTrigger.vue","mtime":1563820943000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/mini-projet-iot/iot-platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mapActions, mapGetters} from 'vuex'\nimport Form from \"@/components/Form\";\n\nexport default {\n    name: \"detail-trigger\",\n    data() {\n        return {\n            commands: [],\n            IdTriger: '',\n            page: 1,\n            perPage: 4,\n            pages: [],\n            trigger: '',\n            triggerCommands: '',\n            look: false\n        }\n    },\n    components: {\n        'generic-form': Form,\n    },\n    computed: {\n        ...mapGetters(['getTrigger', 'getUserId', 'getApiUrl']),\n        displayCommands() {\n            return this.paginate(this.triggerCommands);\n        },\n        getCommands(){\n            return this.triggerCommands;\n         }\n    },\n    methods: {\n        ...mapActions(['postRequest', 'getRequestLite']),\n        pushCommand: function () {\n            this.look = true\n            var postData = {};\n            for (var i = 1; i <= this.commands.length; i++) {\n                var key = 'commande' + i,\n                    value = this.commands[i - 1].value;\n                if (value === '') {\n                    break;\n                }\n                postData[key] = value;\n            }\n            var payload = {\n                'data': postData,\n                'link': '/trigger-service/trigers/' + this.IdTriger\n            };\n            this.postRequest(payload).then(() => {\n                this.flash(this.$t('commande.add-success'), 'success');\n                var payloadB = {\n                    'link': '/trigger-service/trigers/' + this.IdTriger + '/commandes'\n                };\n                this.getRequestLite(payloadB).then(request => {\n                    this.triggerCommands = request.data\n                }).catch( (err)=> {\n                    console.log(\"error \" + err);\n                });\n                this.commands = [];\n            }).catch(() => {\n                this.flash(this.$t('commande.add-error'), 'error');\n            })\n            this.look = false;\n        },\n        addCommand: function () {\n            var commande = \"Commande\" + (this.commands.length + 1);\n            this.commands.push({\n                name: commande,\n                value: ''\n            });\n        },\n        deleteCommand: function (index) {\n            this.commands.splice(index, 1);\n        },\n        setPages() {\n            this.pages = [];\n            let numberOfPages = Math.ceil(this.triggerCommands.length / this.perPage);\n            for (let index = 1; index <= numberOfPages; index++) {\n                this.pages.push(index);\n            }\n        },\n        paginate(commands) {\n            let page = this.page;\n            let perPage = this.perPage;\n            let from = (page * perPage) - perPage;\n            let to = (page * perPage);\n            return commands.slice(from, to);\n        }\n    },\n    watch: {\n        getCommands() {\n            this.setPages();\n        }\n    },\n    created() {\n        var triggerId = this.$route.params.id;\n        this.IdTriger = triggerId\n        var payloadA = {\n            'link': '/trigger-service/trigers/' + triggerId\n        };\n\n        this.getRequestLite(payloadA).then(request => {\n            this.trigger = request.data\n             }).catch( (err)=> {\n                console.log(\"error \" + err);\n        });\n\n        this.$store.dispatch('getRequest', payloadA);\n        var payloadB = {\n            'link': '/trigger-service/trigers/' + triggerId + '/commandes'\n        };\n        this.getRequestLite(payloadB).then(request => {\n            this.triggerCommands = request.data\n        }).catch( (err)=> {\n            console.log(\"error \" + err);\n        });\n    }\n}\n",{"version":3,"sources":["DetailTrigger.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DetailTrigger.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div id=\"content\">\r\n        <div class=\"row page-title-path\">\r\n            <div class=\"col\">\r\n                <h2>{{ $t('main-title') }}</h2>\r\n            </div>\r\n            <div class=\"col right\">\r\n                <p>Home > <span> {{ $t('main-title') }}</span></p>\r\n            </div>\r\n\r\n        </div>\r\n        <section class=\"component-section\">\r\n            <div class=\"row\">\r\n                <div class=\"col s12 l5\">\r\n                    <div class=\"Trigger-head\">\r\n                        <p><strong>{{ $t('trigger-name') }}</strong>{{ this.trigger.nom }}</p>\r\n                        <p><strong>{{ $t('trigger-id') }}</strong>#{{ this.trigger.id }}</p>\r\n                        <p><strong>{{ $t('trigger-owner')}}</strong>@chouaib</p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col s12 l7\">\r\n                    <div class=\"Trigger-head ch-head-2\"\r\n                         style=\"border-left: 1px solid #9e9e9e; padding: 0 20px 5px 30px\">\r\n                        <p><strong class=\"transparent\">{{ $t('trigger-key')}}</strong><span\r\n                                class=\"red  lighten-4 red-text\">{{ this.trigger.apikey }}</span></p>\r\n                        <div>\r\n                            <router-link to=\"/dashboard/Triggers/new\"\r\n                                         class=\"waves-effect waves-light btn delete-Trigger\">\r\n                                <i class=\"fa fa-trash fa-small\"></i>\r\n                                {{ $t('delete-trigger') }}\r\n                            </router-link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col s12\">\r\n                    <div class=\"trigger-detail\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col s12 l6\">\r\n                                <h5>{{$t('commands')}}</h5>\r\n                                <table class=\"striped bordered\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th>#</th>\r\n                                        <th>{{ $t('table.command-id') }}</th>\r\n                                        <th>{{ $t('table.command-name') }}</th>\r\n                                        <th>{{ $t('table.command-created') }}</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    <tr v-for=\"(command, index) in displayCommands\" v-bind:key=\"command.id\"\r\n                                        v-bind:class=\"{ 'teal lighten-4': command.executed}\">\r\n                                        <td>{{ index + 1 }}</td>\r\n                                        <td>{{command.id}}</td>\r\n                                        <td>{{command.valeur}}</td>\r\n                                        <td>30/04/2019</td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                                <div class=\"right\">\r\n                                    <ul v-if=\"pages.length > 1\" class=\"pagination\">\r\n                                        <li v-if=\"page != 1\" @click=\"page--\"><a href=\"#!\"><i class=\"material-icons\">chevron_left</i></a>\r\n                                        </li>\r\n                                        <li v-for=\"pageNumber in pages.slice(page-1, page+5)\" :key=\"pageNumber\" @click=\"page = pageNumber\"\r\n                                            :class=\"{active: page == pageNumber }\"><a href=\"#!\">{{pageNumber}}</a></li>\r\n                                        <li class=\"waves-effect\" @click=\"page++\" v-if=\"page < pages.length\"><a\r\n                                                href=\"#!\"><i class=\"material-icons\">chevron_right</i></a></li>\r\n                                    </ul>\r\n                                </div>\r\n                                <form class=\"form add-command\" id=\"add-command\" @submit.prevent=\"pushCommand\">\r\n                                    <generic-form>\r\n                                        <div slot=\"form-fields\">\r\n                                            <div class=\"row\" v-for=\"(cmd, index) in this.commands\" :key=\"cmd\">\r\n                                                <div class=\"input-field col s12\">\r\n                                                    <input\r\n                                                            v-bind:id=\"cmd.name\"\r\n                                                            type=\"text\"\r\n                                                            class=\"validate\"\r\n                                                            minlength=\"3\"\r\n                                                            v-model=\"commands[index].value\">\r\n                                                    <label v-bind:for=\"cmd.name\">\r\n                                                        {{ $t('trigger.commandX', {num: index + 1}) }}\r\n                                                    </label>\r\n                                                    <i @click=\"deleteCommand(index)\"\r\n                                                       class=\"fa fa-times delete-field red-text text-darken-5\"></i>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div slot=\"form-controls\">\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col\">\r\n                                                    <div class=\"btn waves-effect waves-light submit\"\r\n                                                         @click=\"addCommand\">\r\n                                                        <i style=\"font-size: .9rem\" class=\"fa fa-plus\"></i> {{\r\n                                                        $t('trigger.commandX', {num: ''}) }}\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div class=\"col right\">\r\n                                                    <button v-if=\"this.commands.length > 0\" :disabled=\"look === true\" type=\"submit\"\r\n                                                            class=\"button waves-effect waves-light btn\">\r\n                                                        {{ $t('trigger.add') }}\r\n                                                        <i class=\"material-icons right\">send</i>\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </generic-form>\r\n                                </form>\r\n                            </div>\r\n                            <div class=\"col s12 l6\">\r\n                                <h5>{{$t('api-requests')}}</h5>\r\n                                <div class=\"urls\">\r\n                                    <div>\r\n                                        <h6>{{$t('update-url')}}</h6>\r\n                                        <pre>  POST : <span>{{ getApiUrl }}/ExecuteCommands/</span><span class=\"key\">{{IdTriger}}</span></pre>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {mapActions, mapGetters} from 'vuex'\r\n    import Form from \"@/components/Form\";\r\n\r\n    export default {\r\n        name: \"detail-trigger\",\r\n        data() {\r\n            return {\r\n                commands: [],\r\n                IdTriger: '',\r\n                page: 1,\r\n                perPage: 4,\r\n                pages: [],\r\n                trigger: '',\r\n                triggerCommands: '',\r\n                look: false\r\n            }\r\n        },\r\n        components: {\r\n            'generic-form': Form,\r\n        },\r\n        computed: {\r\n            ...mapGetters(['getTrigger', 'getUserId', 'getApiUrl']),\r\n            displayCommands() {\r\n                return this.paginate(this.triggerCommands);\r\n            },\r\n            getCommands(){\r\n                return this.triggerCommands;\r\n             }\r\n        },\r\n        methods: {\r\n            ...mapActions(['postRequest', 'getRequestLite']),\r\n            pushCommand: function () {\r\n                this.look = true\r\n                var postData = {};\r\n                for (var i = 1; i <= this.commands.length; i++) {\r\n                    var key = 'commande' + i,\r\n                        value = this.commands[i - 1].value;\r\n                    if (value === '') {\r\n                        break;\r\n                    }\r\n                    postData[key] = value;\r\n                }\r\n                var payload = {\r\n                    'data': postData,\r\n                    'link': '/trigger-service/trigers/' + this.IdTriger\r\n                };\r\n                this.postRequest(payload).then(() => {\r\n                    this.flash(this.$t('commande.add-success'), 'success');\r\n                    var payloadB = {\r\n                        'link': '/trigger-service/trigers/' + this.IdTriger + '/commandes'\r\n                    };\r\n                    this.getRequestLite(payloadB).then(request => {\r\n                        this.triggerCommands = request.data\r\n                    }).catch( (err)=> {\r\n                        console.log(\"error \" + err);\r\n                    });\r\n                    this.commands = [];\r\n                }).catch(() => {\r\n                    this.flash(this.$t('commande.add-error'), 'error');\r\n                })\r\n                this.look = false;\r\n            },\r\n            addCommand: function () {\r\n                var commande = \"Commande\" + (this.commands.length + 1);\r\n                this.commands.push({\r\n                    name: commande,\r\n                    value: ''\r\n                });\r\n            },\r\n            deleteCommand: function (index) {\r\n                this.commands.splice(index, 1);\r\n            },\r\n            setPages() {\r\n                this.pages = [];\r\n                let numberOfPages = Math.ceil(this.triggerCommands.length / this.perPage);\r\n                for (let index = 1; index <= numberOfPages; index++) {\r\n                    this.pages.push(index);\r\n                }\r\n            },\r\n            paginate(commands) {\r\n                let page = this.page;\r\n                let perPage = this.perPage;\r\n                let from = (page * perPage) - perPage;\r\n                let to = (page * perPage);\r\n                return commands.slice(from, to);\r\n            }\r\n        },\r\n        watch: {\r\n            getCommands() {\r\n                this.setPages();\r\n            }\r\n        },\r\n        created() {\r\n            var triggerId = this.$route.params.id;\r\n            this.IdTriger = triggerId\r\n            var payloadA = {\r\n                'link': '/trigger-service/trigers/' + triggerId\r\n            };\r\n\r\n            this.getRequestLite(payloadA).then(request => {\r\n                this.trigger = request.data\r\n                 }).catch( (err)=> {\r\n                    console.log(\"error \" + err);\r\n            });\r\n\r\n            this.$store.dispatch('getRequest', payloadA);\r\n            var payloadB = {\r\n                'link': '/trigger-service/trigers/' + triggerId + '/commandes'\r\n            };\r\n            this.getRequestLite(payloadB).then(request => {\r\n                this.triggerCommands = request.data\r\n            }).catch( (err)=> {\r\n                console.log(\"error \" + err);\r\n            });\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n<i18n>\r\n    {\r\n    \"en\": {\r\n    \"main-title\": \"Action Detail :\",\r\n    \"trigger-name\": \"Action Name :\",\r\n    \"trigger-id\": \"Action ID :\",\r\n    \"trigger-owner\": \"Owner :\",\r\n    \"trigger-key\": \"API Key : \",\r\n    \"description\": \"Description :\",\r\n    \"delete-trigger\": \"Action\",\r\n    \"commands\": \"Commands\",\r\n    \"api-requests\": \"Requêtes API\",\r\n    \"update-url\": \"Update URL\",\r\n    \"table\": {\r\n    \"command-id\": \"Command ID\",\r\n    \"command-name\": \"Command Name\",\r\n    \"command-created\": \"Created\"\r\n    }\r\n    },\r\n    \"fr\": {\r\n    \"main-title\": \"Detail de Action\",\r\n    \"trigger-name\": \"Nom de l'Action :\",\r\n    \"trigger-id\": \"ID de Action :\",\r\n    \"trigger-owner\": \"Propriétaire :\",\r\n    \"trigger-key\": \"API Key : \",\r\n    \"description\": \"Description :\",\r\n    \"delete-trigger\": \"Action\",\r\n    \"commands\": \"Commandes\",\r\n    \"api-requests\": \"API Requests\",\r\n    \"update-url\": \"Update URL\",\r\n    \"table\": {\r\n    \"command-id\": \"ID Commande\",\r\n    \"command-name\": \"Nom Commande\",\r\n    \"command-created\": \"Crée\"\r\n    }\r\n    }\r\n    }\r\n</i18n>\r\n"]}]}