{"remainingRequest":"/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/node_modules/babel-loader/lib/index.js!/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/src/components/FieldChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/src/components/FieldChart.vue","mtime":1562083328707},{"path":"/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/home/clokbani/linux/DevWeb/Iot-Project/Front/iot-platform/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport Plotly from 'plotly.js';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: \"FieldChart\",\n  data: function data() {\n    return {\n      valeur: null,\n      date: null,\n      chart: null,\n      id: '',\n      file: null,\n      idfield: null\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['getApiUrl'])),\n  props: ['nameField', 'idField'],\n  created: function created() {\n    this.id = this.nameField + '-' + this.idField; //   Pusher.logToConsole = true;\n\n    var key = this.$store.state.canal.cleLecture,\n        keyWrite = this.$store.state.canal.cleEcriture,\n        token = this.$store.state.token,\n        nameF = this.nameField,\n        idChart = this.id;\n    var pusher = new Pusher('84bee67aad46ed497369', {\n      cluster: 'eu',\n      forceTLS: true\n    });\n    var channel = pusher.subscribe('my-channel'),\n        apiUrl = this.getApiUrl;\n    channel.bind('my-event', function (data) {\n      var _this = this;\n\n      if (data['data'] === keyWrite) {\n        axios.get(apiUrl + '/canal-service/read?key=' + key + '&field=' + nameF, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n          }\n        }).then(function (response) {\n          var results = response.data;\n          var dateresult = results.map(function (a) {\n            return a.date;\n          });\n          var valueresult = results.map(function (a) {\n            return a.valeur;\n          });\n          _this.valeur = valueresult;\n          _this.date = dateresult;\n          var x = [];\n\n          for (var i = 0; i < dateresult.length; i++) {\n            x.push(i);\n          }\n\n          var layout = {\n            title: nameF,\n            xaxis: {\n              title: 'Date',\n              showticklabels: false,\n              tickangle: 'auto',\n              tickvals: x,\n              ticktext: dateresult\n            },\n            yaxis: {\n              title: 'Values',\n              showticklabels: true\n            }\n          };\n          Plotly.newPlot(idChart, [{\n            y: valueresult\n          }], layout);\n        }).catch(function (error) {});\n      }\n    });\n  },\n  mounted: function mounted() {\n    $('.tooltipped').tooltip();\n    this.getData();\n    $('.fixed-action-btn').floatingActionButton({\n      hoverEnabled: false,\n      direction: 'left'\n    });\n  },\n  methods: {\n    getData: function getData() {\n      var _this2 = this;\n\n      var key = this.$store.state.canal.cleLecture,\n          token = this.$store.state.token,\n          nameF = this.nameField,\n          apiUrl = this.getApiUrl,\n          idChart = this.id;\n      axios.get(apiUrl + '/canal-service/read?key=' + key + '&field=' + nameF, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(function (response) {\n        var results = response.data;\n        var dateresult = results.map(function (a) {\n          return a.date;\n        });\n        var valueresult = results.map(function (a) {\n          return a.valeur;\n        });\n        _this2.valeur = valueresult;\n        _this2.date = dateresult;\n        var x = [];\n\n        for (var i = 0; i < dateresult.length; i++) {\n          x.push(i);\n        }\n\n        var layout = {\n          //title: nameF,\n          xaxis: {\n            title: 'Date',\n            showticklabels: false,\n            tickangle: 'auto',\n            tickvals: x,\n            ticktext: dateresult\n          },\n          yaxis: {\n            title: 'Values',\n            showticklabels: true\n          }\n        };\n        Plotly.newPlot(idChart, [{\n          y: valueresult\n        }], layout);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    // import\n    processFile: function processFile(event) {\n      this.file = event.target.files[0];\n      this.importCSV();\n    },\n    importCSV: function importCSV() {\n      if (this.file.type == \"application/vnd.ms-excel\") {\n        var formData = new FormData();\n        var apiUrl = this.getApiUrl;\n        formData.append('file', this.file);\n        axios.post(apiUrl + '/canal-service/import-data/' + this.idField, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': 'Bearer ' + this.$store.state.token\n          }\n        }).then(function () {//console.log('SUCCESS!!');\n        }).catch(function () {//console.log('FAILURE!!');\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["FieldChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div id=\"field-chart\" class=\"field-chart\">\n        <ul class=\"collapsible\">\n            <li>\n                <div class=\"collapsible-header chart\" style=\"opacity: 1\">\n                    <i class=\"material-icons\">filter_drama</i>{{ $t('canal.fieldX', {num: ''}) }} : <span class=\"teal-text lighten-1\">{{ this.nameField }}</span>\n                    <ul class=\"right\">\n                        <li>\n                            <label for=\"import-file\">\n                                <a class=\"btn-floating  grey darken-1 tooltipped\"\n                                   data-position=\"bottm\" :data-tooltip=\"this.$t('tooltips.import')\">\n                                    <i  class=\"material-icons\">attach_file</i></a>\n                            </label>\n                            <input id=\"import-file\" type=\"file\" accept=\".csv\" @change=\"processFile($event)\">\n                        </li>\n                        <li><a class=\"btn-floating publish tooltipped\"\n                               data-position=\"bottom\" :data-tooltip=\"this.$t('tooltips.export')\"\n                               :href=\" this.getApiUrl +  '/canal-service/export-data/' + this.idField\">\n                            <i class=\"material-icons\">publish</i></a>\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"collapsible-body\"\n                     style=\"display: block; position:relative; height: 290px !important; overflow: hidden\">\n                    <div :id=\"this.id\" width=\"100%\" height=\"100%\"\n                         style=\"display: block; position: absolute; width: 100%; height: 300px !important; top:0; left:0;\"></div>\n                </div>\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\n\n    import axios from 'axios';\n    import Pusher from 'pusher-js'\n    import Plotly from 'plotly.js'\n    import {  mapGetters } from 'vuex';\n\n    export default {\n        name: \"FieldChart\",\n        data() {\n            return {\n                valeur: null,\n                date: null,\n                chart: null,\n                id: '',\n                file: null,\n                idfield: null,\n\n            }\n        },\n        computed: {\n            ...mapGetters(['getApiUrl'])\n        },\n        props: ['nameField', 'idField'],\n        created() {\n            this.id = this.nameField + '-' + this.idField;\n            //   Pusher.logToConsole = true;\n\n            var key = this.$store.state.canal.cleLecture,\n                keyWrite = this.$store.state.canal.cleEcriture,\n                token = this.$store.state.token,\n                nameF = this.nameField,\n                idChart = this.id;\n\n            var pusher = new Pusher('84bee67aad46ed497369', {\n                cluster: 'eu',\n                forceTLS: true\n            });\n\n            var channel = pusher.subscribe('my-channel'),\n                apiUrl  =  this.getApiUrl;\n            channel.bind('my-event', function (data) {\n                if (data['data'] === keyWrite) {\n                    axios.get( apiUrl +  '/canal-service/read?key=' + key + '&field=' + nameF, {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': 'Bearer ' + token\n                        }\n                    })\n                        .then(response => {\n                            let results = response.data;\n                            let dateresult = results.map(a => a.date);\n                            let valueresult = results.map(a => a.valeur);\n                            this.valeur = valueresult;\n                            this.date = dateresult;\n\n                            let x = [];\n\n                            for (let i = 0; i < dateresult.length; i++) {\n                                x.push(i);\n                            }\n\n                            var layout = {\n                                title: nameF,\n                                xaxis: {\n                                    title: 'Date',\n                                    showticklabels: false,\n                                    tickangle: 'auto',\n                                    tickvals: x,\n                                    ticktext: dateresult\n\n                                },\n                                yaxis: {\n                                    title: 'Values',\n                                    showticklabels: true,\n                                }\n                            };\n                            Plotly.newPlot(idChart, [{y: valueresult}], layout);\n\n                        })\n                        .catch(error => {\n                        })\n                }\n            });\n\n        },\n        mounted() {\n            $('.tooltipped').tooltip();\n            this.getData();\n            $('.fixed-action-btn').floatingActionButton({\n                hoverEnabled: false,\n                direction: 'left',\n            });\n        },\n        methods: {\n            getData() {\n                var key = this.$store.state.canal.cleLecture,\n                    token = this.$store.state.token,\n                    nameF = this.nameField,\n                    apiUrl  =  this.getApiUrl,\n                    idChart = this.id;\n                axios.get( apiUrl +  '/canal-service/read?key=' + key + '&field=' + nameF, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + token\n                    }\n                })\n                    .then(response => {\n                        let results = response.data;\n                        let dateresult = results.map(a => a.date);\n                        let valueresult = results.map(a => a.valeur);\n                        this.valeur = valueresult;\n                        this.date = dateresult;\n\n                        let x = [];\n\n                        for (let i = 0; i < dateresult.length; i++) {\n                            x.push(i);\n                        }\n\n                        var layout = {\n                            //title: nameF,\n                            xaxis: {\n                                title: 'Date',\n                                showticklabels: false,\n                                tickangle: 'auto',\n                                tickvals: x,\n                                ticktext: dateresult\n\n                            },\n                            yaxis: {\n                                title: 'Values',\n                                showticklabels: true,\n                            }\n                        };\n                        Plotly.newPlot(idChart, [{y: valueresult}], layout);\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    })\n            },\n\n\n            // import\n\n            processFile(event) {\n                this.file = event.target.files[0];\n                this.importCSV();\n            },\n            importCSV: function () {\n\n                if (this.file.type == \"application/vnd.ms-excel\") {\n\n                    let formData = new FormData();\n                    let apiUrl  =  this.getApiUrl;\n\n                    formData.append('file', this.file);\n\n                    axios.post( apiUrl +  '/canal-service/import-data/' + this.idField, formData, {\n                        headers: {\n                            'Content-Type': 'multipart/form-data',\n                            'Authorization': 'Bearer ' + this.$store.state.token,\n                        }\n\n                    }).then(function () {\n                        //console.log('SUCCESS!!');\n                    }).catch(function () {\n                        //console.log('FAILURE!!');\n                    });\n                }\n\n            },\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/components"}]}